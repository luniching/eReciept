var fs = require('fs'),
	path = require('path');


var Processor = module.exports = function(src, dest, filter, next) {
	this._src = src;
	this._dest = dest;
	this._filter = filter;
	this._ext = null;
	this._next = next;
};

Processor.prototype.run = function(file, callback) {
	if (file.match(this._filter)) {
		this._processInternal(file, callback);
		return;
	}
	
	if (this._next) {
		this._next.run(file, callback);
		return;
	}
	
	callback();
};

Processor.prototype._processInternal = function(file, callback) {
	var that = this,
		ext = file.match(this._filter)[0],
		destExt = this._ext || ext,
		src = path.join(this._src, file),
		dest = path.join(this._dest, file.replace(this._filter, destExt));

	// Make sure the source file exists
	fs.stat(src, function(err, srcStats) {
		if (err) {
			// Default result moves on to next handler if 'ENOENT'
			// otherwise it's an actual error
			return callback(err.code === 'ENOENT' ? null : err);
		}
		
		// See if a destination file exists already
		fs.stat(dest, function(err, destStats) {
			if (err && err.code !== 'ENOENT') {
				// Actual error
				return callback(err);
			}
			
			if (destStats && srcStats.mtime <= destStats.mtime) {
				// No changes detected
				return callback();
			}
			
			// Compile
			that._process(file, callback);
		});
	});
};

Processor.prototype._process = function(file, callback) {
	callback();
};