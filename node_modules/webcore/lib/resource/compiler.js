var fs = require('fs'),
	util = require('util'),
	path = require('path'),
	fsutil = require('../fsutil'),
	Processor = require('./processor');


var Compiler = module.exports = function(src, dest, filter, ext, next) {
	Processor.apply(this, [src, dest, filter, next]);
	this._ext = ext;
};

util.inherits(Compiler, Processor);

Compiler.prototype._process = function(file, callback) {
	var that = this,
		name = file.replace(this._filter, ''),
		src = path.join(this._src, file),
		dest = path.join(this._dest, name + this._ext);

	fs.readFile(src, 'utf8', function(err, content) {
		if (err) { return callback(err); }

		that._compile(name, content, function(err, str) {
			if (err) {
				// Give the error a little more context
				var message = util.format('ERROR: Could not compile \'%s\' - %s', name, err.message);
				err = new Error(message);

				// This was synchronous, so process callback on next event loop.
				process.nextTick(function() {
					callback(err);
				});
				return;
			}

			var dirname = path.dirname(dest);
			fsutil.mkdir(dirname, function() {
				if (err) { return callback(err); }

				fs.writeFile(dest, str, 'utf8', function(err) {
					callback(err);
				});
			});
		});

	});
};

Compiler.prototype._compile = function(name, content, callback) {
	callback();
};
