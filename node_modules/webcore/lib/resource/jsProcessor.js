var path = require('path'),
	requirejs = require('requirejs'),
	fsutil = require('../fsutil'),
	Compiler = require('./compiler');

var proxy = function(context, fn) {
	return function() {
		return fn.apply(context, Array.prototype.slice.apply(arguments));
	};
};


var JsProcessor = module.exports = function() {

};

JsProcessor.prototype = {
	_handleDirectory: function(dir, next) {
		if (this._src === dir) { return next(); }

		var rel = path.relative(this._src, dir),
			opts = {
				src: dir,
				dest: path.join(this._dest, rel),
				compress: this._compress
			};

		console.log('descending into', dir);
		this.process(opts, next);
	},

	_handleFile: function(file, next) {
		var opts = {
			baseUrl: this._src,
			name: path.basename(file, '.js'),
			out: path.join(this._dest, path.basename(file))
		};

		// Merge the configurations
		var config = this._config;
		Object.keys(config).forEach(function(key) {
			opts[key] = config[key];
		});

		console.log('optimizing', opts.name);
		requirejs.optimize(opts, next);
	},

	process: function(opts, callback) {
		this._src = opts.src,
		this._dest = opts.dest,
		this._compress = !!opts.compress;
		this._config = require(path.join(this._src, 'config.js'));

		fsutil.forEach(this._src, proxy(this, this._handleDirectory), proxy(this, this._handleFile), callback);
	}
};

/*
1. Copy compressed files
2. Aggregate modules
3. Remove individual aggregate files
*/
