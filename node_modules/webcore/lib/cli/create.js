var program = require('commander'),
	path    = require('path'),
	term    = require('./term'),
	cliUtil = require('./util'),
	webcoreVersion = require('../../package.json').version;
/**
 * Public API for the 'create' command
 * @param {String} dir the directory in which the application should be created
 */
module.exports = function create(dir) {
	term.println(term.MAGENTA, ' Creating application in \'%s\'', dir);

	cliUtil.isEmpty(dir, function (empty) {
		if (empty) {
			return generate(dir);
		}

		program.confirm('Directory not empty. Continue? ', function (ok) {
			process.stdin.destroy();

			if (ok) {
				return generate(dir);
			}

			term.exit();
		});
	});
};

/**
 * Prints instructions for using a newly created application.
 * @param {String} dir The directory in which the application was created.
 */
function success(dir) {
	term.info();
	term.println(term.BOLDGREEN, '   install dependencies:');
	term.println(term.WHITE,     '     $ cd %s && npm install', dir);
	term.info();
	term.println(term.BOLDGREEN, '   run the app:');
	term.println(term.WHITE,     '     $ npm start');
	term.println(term.RESET);
}

/**
 * Returns a function that can create paths for the given root via `path.join`.
 * This is simply sugar around repeatedly calling `path.join` multiple times
 * for paths with a common root.
 * @param {String} root Root for created paths.
 * @return {Function}
 *   @param {String} segment* One or more path segments to join with the root.
 */
function pathHelper(root) {
	return function generatedPathHelper(/*segment, ...*/) {
		var segments = Array.prototype.slice.call(arguments);
		return path.join.apply(null, [root].concat(segments));
	};
}

/**
 * Generates all application-specific files and/or copies files into their correct locations
 * @param {String} root the directory in which the application should be created
 */
function generate(root) {
	var copy     = cliUtil.copy,
		copydir  = cliUtil.copydir,
		mkdir    = cliUtil.mkdir,
		read     = cliUtil.read,
		write    = cliUtil.write;

	mkdir(root, function onMkdir(rootPath) {
		root = pathHelper(rootPath);

		var appName = path.basename(rootPath).replace(/\/$/,''),
			support = pathHelper(path.resolve(__dirname, 'support')),
			pkg     = JSON.parse(read(support('package.json'))),

			dirs = [
				'config',
				'mvc',
				'public'
			],

			files = [
				'.gitignore',
				'.jshintignore',
				'.jshintrc',
				'.nodemonignore',
				'index.js'
			];

		// Customize package.json
		pkg.name = appName;
		pkg.webcore.version = webcoreVersion;
		write(root('package.json'), JSON.stringify(pkg, null, 2));

		files.forEach(function copyFile (file) {
			copy(support(file), root(file));
		});

		dirs.forEach(function copyDirectory (dir) {
			copydir(support(dir), root(dir));
		});

		process.on('exit', success.bind(null, rootPath));
	});
}
