var fs = require('fs'),
	path = require('path'),
	semver = require('semver'),
	requirejs = require('requirejs'),
	term = require('./term'),
	config = require('../config'),
	webcore = require('../../index.js'),
	pkg = require('../../package.json');

/**
 * Public API for the 'build' command
 * @param {String} dir the path to the webcore application to build
 */
module.exports = function build(dir) {
	var pkgFile = path.resolve(dir, 'package.json'),
		appPkg = require(pkgFile),
		appVersion = appPkg.webcore && appPkg.webcore.version;

	term.info();
	term.info('Building \'%s\' v%s using webcore v%s', dir, appVersion, pkg.version);

	if (!appVersion) {
		term.error('Not a webcore application.');
		return term.exit();
	}

	if (semver.gt(appVersion, pkg.version)) {
		term.error();
		term.error('The application version (%s) is newer than the installed webcore version (%s).', appVersion, pkg.version);
		term.error('Please upgrade the application at %s before continuing:', dir);
		term.error();
		term.error('     $ webcore upgrade %s', dir);
		return term.exit();
	}

	process.on('exit', function() {
		term.log(term.RESET);
	});

	// Read configuration and continue
	config.init(dir, function(err) {
		if (err) { return term.exit(err); }

		init(dir);
	});
};

/**
 * Kicks off the build process
 * @param {String} root the directory to build
 */
function init(root) {
	term.info('Compiling templates and CSS...');

	var options = {
		src : config.get('paths:resourceRoot'),
		dest: config.get('paths:staticRoot'),
		compress: true
	};

	webcore.rescompile.compile(options, function(err) {
		if (err) { return term.exit(err); }

		term.info('Compilation complete.');

		// Get the client requireJs configuration
		var srcPath = path.resolve(config.get('paths:resourceRoot'), 'js'),
			destPath = path.resolve(config.get('paths:staticRoot'), 'js'),
			requireConfig = require(path.join(srcPath, 'main')),
			rjsConfig = {
				baseUrl: srcPath,
				name: 'main',
				dir: destPath,
				removeCombined: true
			};

		// Merge the configurations
		Object.keys(requireConfig).forEach(function(key) {
			rjsConfig[key] = requireConfig[key];
		});

		term.info('Packaging Javascript modules...');
		requirejs.optimize(rjsConfig, function (buildResponse) {
			term.info('Packaging complete.');
		});
	});
}
