var fs     = require('fs'),
	path   = require('path'),
    jshint = require('jshint/lib/hint'),
    confer = require('confer'),
	term   = require('./term'),
	exists = fs.existsSync || path.existsSync;

module.exports = function lint(dir, meta) {
	dir = path.resolve(dir || process.cwd());

	var verbose = meta.verbose,
		server  = meta.server || meta.all,
		client  = meta.client || meta.all || !server,
		pkg,
		config,
		resourceRoot;

	if (!exists(dir)) {
		return term.exit(new Error('FATAL: Directory does not exist: ' + dir));
	}

	try {
		 pkg = require(path.resolve(dir, './package.json'));
	} catch(ex) {}

	if (!(pkg && pkg.webcore && pkg.webcore.version)) {
		return term.exit(new Error('FATAL: Not a webcore project: ' + dir));
	}

	if (server) {
		term.println(term.MAGENTA, 'Linting server JavaScript...');
		lintDirectory(dir, verbose);
	}

	if (client) {
		try {
			config = require(path.join(dir, 'config', 'app.json'));
		} catch (ex) {}

		resourceRoot = config && config.paths && config.paths.resourceRoot;

		if (resourceRoot) {
			dir = path.join(dir, resourceRoot, 'js');

			if (exists(dir)) {
				term.println(term.MAGENTA, 'Linting client JavaScript...');
				lintDirectory(dir, verbose);
			}
		}
	}
};

/**
 * Run JSHint against the specified directory.
 */
function lintDirectory(dir, verbose) {
	var config     = confer('.jshintrc', dir),
	    ignoreFile = confer.locateFile('.jshintignore', dir),
	    ignores;

	if (ignoreFile) {
		ignores = fs.readFileSync(ignoreFile, 'utf8').split('\n')
			.filter(function (line) {
				return !!line.trim();
			})
			.map(function (line) {
				return path.resolve(path.dirname(ignoreFile), line.trim());
			});
	}

	jshint.hint([dir], config, (verbose ? verboseReporter : reporter), ignores);
}

/**
 * Custom JSHint reporter that prints additional lint information.
 */
function verboseReporter (results, data) {
	var file, globals, unused;

	reporter(results, data);

	data.forEach(function (item) {
		file    = item.file;
		globals = item.implieds;
		unused  = item.unused;

		if (globals || unused) {
			term.info('');
			term.info('\t%s:', file);
		}

		if (globals) {
			term.println(term.WHITE, '\t    Implied globals:');
			globals.forEach(function (global) {
				term.println(term.RED, '\t\t%s (line %s)', global.name, global.line);
			});

			if (unused) {
				term.info('');
			}
		}

		if (unused) {
			term.println(term.WHITE, '\t    Unused variables:');
			unused.forEach(function (unused) {
				term.println(term.RED, '\t\t%s (line %s)', unused.name, unused.line);
			});
		}
	});

	term.info('');
}

/**
 * Custom JSHint reporter.
 */
function reporter (results, data) {
	var len = results.length,
		error;

	results.forEach(function eachResult(result) {
		error = result.error;

		term.error(result.file + ': line ' + error.line + ', col ' +
			error.character + ', ' + error.reason);
	});

	if (len) {
		term.error(len + ' lint error' + (len > 1 ? 's' : ''));
	}
	else {
		term.ok('No lint errors.');
	}
}
