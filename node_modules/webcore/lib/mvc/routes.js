var fs = require("fs"),
	path = require("path"),
	async = require('async'),
	cache = null;

/**
 * NOTE: USE routes.scan(). (This API exists to preserve backward-compatibility.)
 * Scans the specified root directory and initializes routes/controllers
 * @param {Object} server the express server instance
 * @param {String} the root directory to scan for routes/controllers
 * @param {Function} callback the continuation to invoke once scanning and loading is complete
 */
var routes = module.exports = function(server, root, callback) {
	console.warn('This API is no longer supported. Use webcore.routes.scan(server, dir)');
	var controllers = routes.scan(server, root);
	callback(null, controllers);
};

/**
 * Scans the specified root directory and initializes routes/controllers
 * @param {Object} server the express server instance
 * @param {String} dir the directory to scan for routes/controllers
 */
routes.scan = function(server, dir) {
	function scan(dir) {
		var files = readdirSync(dir),
			controllers = [];

		if (files && files.length) {
			files.forEach(function iter(file) {
				var filePath = path.join(dir, file),
					stats = statSync(filePath),
					controller;

				if (stats) {
					if (stats.isDirectory()) {
						// Descend into the directory to scan its contents
						controllers = controllers.concat(scan(filePath));
					}
					else if (stats.isFile()) {
						// Only load if it's a js file
						if (filePath.match(/\.js$/i)) {
							// Load and initialize controller
							controller = require(filePath);

							if (('route' in controller) && (typeof controller.route === 'function')) {
								controller.route(server);
							} else if (typeof controller === 'function') {
								controller(server);
							}

							controllers.push(controller);
						}
					}
				}
			});
		}

		return controllers;
	}

	return scan(dir);
};

/**
 *
 */
function statSync(file) {
	return safeFsSync('statSync', file);
}

/**
 *
 * @param dir
 * @returns
 */
function readdirSync(dir) {
	return safeFsSync('readdirSync', dir);
}

/**
 *
 * @returns
 */
function safeFsSync() {
	var args = Array.prototype.slice.apply(arguments),
		operation = args.shift(),
		result = null;

	try {
		result = fs[operation].apply(null, args);
	} catch (err) {
		console.error(err);
	}
	return result;
}
