var nconf = require('nconf'),
	path = require('path');

/**
 * Initialized the default properties as well as config files and any provided file names. Files
 * will be loaded/evaluated in the order provided (e.g. generic => specific) so files that should
 * override properties should be defined later.
 *
 * @param {Array} [files] an array of configuration file names (sans extension, e.g. ['user-props']) to be loaded
 * @param {Function} callback continuation method (reserved for future use)
 */
nconf.init = function(appRoot, files, callback) {
	var env = 'development',
		name = null,
		paths = null;

	if (!callback && typeof files === 'function') {
		callback = files;
		files = [];
	}
	files = files || [];

	// Read in base configuration
	nconf.argv().env();

	// Get environment and build base list of files
	env = nconf.get('NODE_ENV') || env;
	files.unshift('app-' + env);
	files.unshift('app');

	// Iterate backward through the list of files. nconf resolves properties
	// in order of definition, so specific properties should be added first,
	// and more more generic, last.
	while(files.length) {
		name = files.pop();
		nconf.add(name, { type: 'file', file: path.join(appRoot, 'config', name + '.json') });
	}

	// Process relative paths in the configuration and rewrite them as absolute paths
	paths = nconf.get('paths');
	Object.keys(paths).forEach(function(key) {
		nconf.set('paths:' + key, path.join(appRoot, paths[key]));
	});


	// Cloud Foundry Support - not a fan of deployment-specific code, but at least it's hidden here.
	var altPort = nconf.get('VCAP_APP_PORT');
	if (altPort) {
		nconf.set('port', altPort);
	} else {
		altPort = nconf.get('PORT');
		if (altPort) {
			nconf.set('port', altPort);
		}
	}

	// Callback is merely reserved for future use
	callback && callback();
};

module.exports = nconf;
