/*global describe:false, it:false, before:false, beforeEach:false*/

'use strict';

var tater = require('tater'),
	should = require('should'),
	v4serializer = require('../index');


describe('v4Content', function () {

	it('should register itself', function () {
		var existing = tater.registerSerializer('v4', v4serializer);
		should.not.exist(existing);
	});


	describe('deserializer', function () {

		it('should handle \'instanceOf\' namespacing', function (next) {

			tater.deserialize('./test/locales/en-US/instanceOfTest.4cb', 'v4', function (err, data) {
				should.not.exist(err);
				should.exist(data);
				should.exist(data.my);
				should.exist(data.my.excessive);
				should.exist(data.my.excessive.package);
				should.exist(data.my.excessive.package.name);
				should.exist(data.my.excessive.package.name.instanceOfTest);

				should.equal(data.my.excessive.package.name.instanceOfTest.myElement, 'My Value 1');

				next();
			});

		});

		it('should handle ContentElement', function (next) {

			tater.deserialize('./test/locales/en-US/keyValueTest.4cb', 'v4', function (err, data) {
				should.not.exist(err);
				should.exist(data);
				should.exist(data.keyValueTest);

				should.equal(data.keyValueTest.keyValueTest1, 'My Value 1');
				should.equal(data.keyValueTest.keyValueTest2, ' My Value 2');
				should.equal(data.keyValueTest.keyValueTest3, 'My Value 3 ');
				should.equal(data.keyValueTest.keyValueTest4, ' My Value 4 ');

				next();
			});

		});


		it('should handle ContentMap', function (next) {

			tater.deserialize('./test/locales/en-US/mapTest.4cb', 'v4', function (err, data) {
				should.not.exist(err);
				should.exist(data);
				should.exist(data.mapTest);

				should.equal(data.mapTest.objectTest1.key1, 'My Value 1');
				should.equal(data.mapTest.objectTest1.key2, 'My Value 2');
				should.equal(data.mapTest.objectTest1.key3, 'My Value 3');
				should.equal(data.mapTest.objectTest1.key4, 'My Value 4');

				next();
			});

		});


		it('should handle ContentStructure', function (next) {

			tater.deserialize('./test/locales/en-US/structureTest.4cb', 'v4', function (err, data) {
				should.not.exist(err);
				should.exist(data);
				should.exist(data.structureTest);

				should.exist(data.structureTest.structureTest1.myMap);
				should.exist(data.structureTest.structureTest1.myElement);

				should.exist(data.structureTest.structureTest1.myList);
				data.structureTest.structureTest1.myList.should.have.lengthOf(2);

				should.exist(data.structureTest.structureTest1.myStructure);

				next();
			});

		});


		it('should handle ContentList', function (next) {

			tater.deserialize('./test/locales/en-US/listTest.4cb', 'v4', function (err, data) {
				should.not.exist(err);
				should.exist(data);
				should.exist(data.listTest);

				should.exist(data.listTest.myList);
				data.listTest.myList.should.have.lengthOf(2);

				next();
			});

		});


		it('should handle DPH', function (next) {

			tater.deserialize('./test/locales/en-US/interpolationTest.4cb', 'v4', function (err, data) {
				should.not.exist(err);
				should.exist(data);
				should.exist(data.interpolationTest);

				should.exist(data.interpolationTest.myElement1);
				should.exist(data.interpolationTest.myElement1.match(/^\{.+\}$/));

				should.exist(data.interpolationTest.myElement2);
				should.exist(data.interpolationTest.myElement2.match(/^.+\{.+\}$/));

				should.exist(data.interpolationTest.myElement3);
				should.exist(data.interpolationTest.myElement3.match(/^\{.+\}.+$/));

				should.exist(data.interpolationTest.myElement4);
				should.exist(data.interpolationTest.myElement4.match(/^.+\{.+\}.+$/));

				should.exist(data.interpolationTest.myElement5);
				should.exist(data.interpolationTest.myElement5.match(/^\{.+\}.+\{.+\}.+$/));

				next();
			});

		});


	});


	describe('serializer', function () {


	});



});